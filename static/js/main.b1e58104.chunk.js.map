{"version":3,"sources":["components/Entry.js","App.js","serviceWorker.js","index.js"],"names":["Title","Typography","Text","Entry","useState","loading","setLoading","quote","setQuote","author","setAuthor","useEffect","fetchRandomQuote","a","fetch","response","json","en","onRefresh","className","title","style","width","height","actions","GithubOutlined","key","onClick","window","open","ReloadOutlined","active","level","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oYAMQA,G,OAAgBC,IAAhBD,OAAOE,EAASD,IAATC,KAgDAC,EA9CD,WAAO,IAAD,EACYC,oBAAS,GADrB,mBACXC,EADW,KACFC,EADE,OAEQF,mBAAS,iGAFjB,mBAEXG,EAFW,KAEJC,EAFI,OAGUJ,mBAAS,mBAHnB,mBAGXK,EAHW,KAGHC,EAHG,KAKlBC,qBAAU,WACRC,MACC,IAEH,IAAMA,EAAgB,uCAAG,kCAAAC,EAAA,6DACvBP,GAAW,GADY,SAEAQ,MAAM,6DAFN,cAEjBC,EAFiB,gBAGMA,EAASC,OAHf,gBAGfP,EAHe,EAGfA,OAAQQ,EAHO,EAGPA,GAChBP,EAAUD,GACVD,EAASS,GACTX,GAAW,GANY,4CAAH,qDAahBY,EAAS,uCAAG,sBAAAL,EAAA,sEACVD,IADU,2CAAH,qDAIf,OACE,yBAAKO,UAAU,aACb,kBAAC,IAAD,CACEC,MAAM,qBACNC,MAAO,CAAEC,MAAO,IAAKC,OAAQ,KAC7BC,QAAS,CACP,kBAACC,EAAA,EAAD,CAAgBC,IAAI,OAAOC,QAdhB,WACjBC,OAAOC,KAAK,yBAcN,kBAACC,EAAA,EAAD,CAAgBJ,IAAI,SAASC,QAAST,MAGxC,kBAAC,IAAD,CAAUb,QAASA,EAAS0B,QAAM,GAChC,kBAAC/B,EAAD,CAAOgC,MAAO,EAAGb,UAAU,SACzB,gCAAMZ,EAAN,KADF,MACuB,kBAACL,EAAD,KAAOO,QCjCzBwB,MARf,WACE,OACE,yBAAKd,UAAU,OACb,kBAAC,EAAD,QCIce,QACW,cAA7BN,OAAOO,SAASC,UAEe,UAA7BR,OAAOO,SAASC,UAEhBR,OAAOO,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.b1e58104.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Card, Skeleton, Typography } from 'antd';\nimport { GithubOutlined, ReloadOutlined } from '@ant-design/icons';\n\nimport './Entry.css';\n\nconst { Title, Text } = Typography;\n\nconst Entry = () => {\n  const [loading, setLoading] = useState(true);\n  const [quote, setQuote] = useState(\"To be a hacker - when I use the term - is somebody who is creative and does wonderful things.\");\n  const [author, setAuthor] = useState(\"Tim Berners-Lee\");\n\n  useEffect(() => {\n    fetchRandomQuote();\n  }, []);\n\n  const fetchRandomQuote = async () => {\n    setLoading(true);\n    const response = await fetch(\"http://programming-quotes-api.herokuapp.com/quotes/random\");\n    const { author, en } = await response.json();\n    setAuthor(author);\n    setQuote(en);\n    setLoading(false);\n  };\n\n  const viewGithub = () => {\n    window.open(\"https://github.com\");\n  };\n\n  const onRefresh = async () => {\n    await fetchRandomQuote();\n  };\n\n  return (\n    <div className=\"container\">\n      <Card\n        title=\"Programming Quotes\"\n        style={{ width: 600, height: 600 }}\n        actions={[\n          <GithubOutlined key=\"edit\" onClick={viewGithub} />,\n          <ReloadOutlined key=\"reload\" onClick={onRefresh} />,\n        ]}\n      >\n        <Skeleton loading={loading} active>\n          <Title level={2} className=\"title\">\n            <em>\"{quote}\"</em> - <Text>{author}</Text>\n          </Title>\n        </Skeleton>\n      </Card>\n    </div>\n  )\n}\n\nexport default Entry;","import React from 'react';\nimport './App.css';\n\nimport Entry from './components/Entry';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Entry />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}